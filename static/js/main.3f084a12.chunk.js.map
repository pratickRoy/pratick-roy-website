{"version":3,"sources":["tictactoe/GameSession.ts","utils/CssHelper.ts","tictactoe/SingleGameMoveData.ts","tictactoe/commons/Player.ts","tictactoe/SingleGameSession.ts","tictactoe/playgame/PlayGameStatus.tsx","tictactoe/commons/Square.tsx","tictactoe/commons/Board.tsx","tictactoe/playgame/PlayNextGame.tsx","tictactoe/playgame/PlayGameScore.tsx","tictactoe/playgame/FinishGameSeries.tsx","tictactoe/playgame/PlayGameTab.tsx","tictactoe/timetravel/TimeTravelStep.tsx","utils/PredicateUtils.ts","tictactoe/timetravel/TimeTravelTab.tsx","tictactoe/playgame/PlayNextGameSeries.tsx","tictactoe/commons/Modal.tsx","tictactoe/GameSeriesSummaryModal.tsx","tictactoe/commons/TicTacToeToast.tsx","tictactoe/GameSetupModal.tsx","tictactoe/Game.tsx","NavBar.tsx","MVPIntroModal.tsx","tictactoe/TicTacToePage.tsx","index.js"],"names":["GameSessionPlayerID","CssHelper","cssClassName","cssClasses","i","length","undefined","join","SingleGameMoveData","squares","movePlayer","winner","status","_squares","_movePlayer","_winner","_status","this","Player","name","side","styleClass","_name","_side","_styleClass","SingleGameSessionStatus","GameSession","playerIDToPlayerMap","singleGameSessionList","playerIDToPlayerScoreMap","currentSingleGameSessionId","currentSingleGameSession","_isGameSessionSetup","_isLastGameInSession","_isGameSessionCompleted","Map","PLAYER_1","PLAYER_2","SingleGameSession","get","numberOfGames","push","getCurrentPlayer","getCurrentMoveDetails","getGameSessionHistory","squareId","captureSquare","moveNumber","timeTravelTo","updateScore","alert","set","players","startingPlayer","history","currentPlayer","getDefaultStartingPlayer","Array","fill","IN_PROGRESS","slice","current","isSquareAlreadyCaptured","evaluateWinner","areAllSquaresCaptured","COMPLETED","getNextPlayer","concat","values","next","value","lines","a","b","c","PlayGameStatus","statusDesc","statusClass","props","className","getCssClassName","defaultCssClasses","React","Component","Square","additionalCssClasses","onClick","BoardStyle","HashSet","require","Board","boardRowCssName","defaultBoardRowCssList","getBoardRowCssNameFromBoardStyle","boardSquareCssName","getBoardSquareCssNameFromBoardStyle","_","range","map","index","renderBoardRow","rowId","renderSquare","owningPlayer","onBoardSquareClick","boardStyleList","filter","boardRowSupportedStyles","contains","boardSquareSupportedStyles","SMALL","NORMAL","GAME_OVER","PlayNextGameStyle","PlayGameScore","playerScores","from","playerToPlayerScoreMap","player","score","defaultPlayerScoreCssClasses","FinishGameSeriesStyle","PlayNextGame","getCssNameFromPlayNextGameStyleList","onNextGameClick","playNextGameStyleList","FinishGameSeries","getCssNameFromFinishGameSeriesStyleList","onFinishGameSeriesClick","finishGameSeriesStyleList","PlayGameTab","singleGameMoveData","defaultGameBoardCssClasses","onGameBoardSquareClick","isLastGameInSeries","TTT_HIDDEN","TimeTravelStepStyle","PredicateUtils","TimeTravelStep","timeTravelStepButtonDesc","timeTravelStepNumber","getBoardStyleList","defaultTimeTravelStepButtonCssClasses","onTimeTravelStepButtonClick","defaultTimeTravelStepBoardStyleList","timeTravelStepStyleList","timeTravelStepBoardSupportedStyles","timeTravelStepStyleToBoardStyleMap","notEmpty","TimeTravelTab","steps","move","gameMoveNumber","id","defaultTimeTravelStepsCssClasses","PlayNextGameSeriesStyle","Modal","modalRoot","modalElement","document","getElementById","modalRootId","createElement","modalStyleClasses","appendChild","removeChild","createPortal","children","PlayNextGameSeries","getCssNameFromPlayNextGameSeriesStyleList","onNextGameSeriesClick","playNextGameSeriesStyleList","GameSeriesSummaryModal","showModal","getWinner","headerText","defaultHeaderCssClasses","winnerScore","forEach","ToastType","TicTacToeToast","showToast","notify","position","toastClassName","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","toastType","ERROR","toast","error","toastText","onClose","notifyToastShown","GameSetupModal","state","type","onChange","updateNumberOfGames","bind","updateGameType","updateOpponentType","onGameSetupConfigurationsSubmit","event","parseInt","currentTarget","setState","updateDisabledInputTypes","Game","gameSession","startGame","isGameSessionSetup","setupGameConfigurations","getPlayerToPlayerScoreMap","isLastGameInSession","playNextGame","finishGameSeries","isGameSessionCompleted","playNextGameSeries","hideToast","setupGameSession","refreshState","initiateNextGameInSession","finishGameSession","NavBar","Navbar","bg","variant","expand","sticky","Brand","href","Toggle","aria-controls","Collapse","Nav","style","width","Link","target","icon","faGoogleDrive","faGithub","faMedium","faLinkedin","MVPIntroModal","getIdealScreenDimensions","window","addEventListener","updateIdealScreenDimensions","removeEventListener","playerWidth","url","controls","height","playerHeight","notifyIntroCompleted","maxWidth","innerWidth","maxHeight","innerHeight","widthPadding","heightPadding","screenWidth","screenHeight","TicTacToePage","introCompleted","Fragment","ReactDOM","render"],"mappings":"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","file":"static/js/main.3f084a12.chunk.js","sourcesContent":["import Player from \"./commons/Player\";\nimport {SingleGameMoveData} from \"./SingleGameMoveData\";\nimport SingleGameSession from \"./SingleGameSession\";\n\nexport enum GameSessionPlayerID {\n    PLAYER_1,\n    PLAYER_2\n}\n\nexport default class GameSession {\n\n    private readonly playerIDToPlayerMap : Map<GameSessionPlayerID, Player>;\n    private readonly singleGameSessionList: SingleGameSession[]\n\n    private playerIDToPlayerScoreMap : Map<GameSessionPlayerID, number>;\n\n    private currentSingleGameSessionId: number\n    private currentSingleGameSession: SingleGameSession\n    private _isGameSessionSetup: boolean\n    private _isLastGameInSession: boolean\n    private _isGameSessionCompleted: boolean\n\n    constructor() {\n\n        this.playerIDToPlayerMap = new Map([\n            [GameSessionPlayerID.PLAYER_1, new Player(\"P1\", \"X\", \"player-1\")],\n            [GameSessionPlayerID.PLAYER_2, new Player(\"P2\", \"O\", \"player-2\")]\n        ]);\n        this.singleGameSessionList = [\n            new SingleGameSession(this.playerIDToPlayerMap, this.playerIDToPlayerMap.get(GameSessionPlayerID.PLAYER_1)),\n        ];\n        this.playerIDToPlayerScoreMap = new Map([\n            [GameSessionPlayerID.PLAYER_1, 0],\n            [GameSessionPlayerID.PLAYER_2, 0]\n        ]);\n\n        this.currentSingleGameSessionId = 0;\n        this.currentSingleGameSession = this.singleGameSessionList[this.currentSingleGameSessionId];\n        this._isGameSessionSetup = false;\n        this._isLastGameInSession = false;\n        this._isGameSessionCompleted = false;\n    }\n\n    setupGameSession(numberOfGames : number): void {\n\n        for (let i = 0; i < numberOfGames - 1; i++) {\n            this.singleGameSessionList.push(\n                new SingleGameSession(\n                    this.playerIDToPlayerMap,\n                    this.playerIDToPlayerMap.get(\n                        i % 2 == 0\n                            ? GameSessionPlayerID.PLAYER_2\n                            : GameSessionPlayerID.PLAYER_1\n                    )\n                )\n            )\n        }\n        if (numberOfGames === 1) {\n            this._isLastGameInSession = true;\n        }\n        this._isGameSessionSetup = true;\n    }\n\n    get isGameSessionSetup(): boolean {\n        return this._isGameSessionSetup;\n    }\n\n    get isLastGameInSession(): boolean {\n        return this._isLastGameInSession;\n    }\n\n    get isGameSessionCompleted(): boolean {\n        return this._isGameSessionCompleted;\n    }\n\n    getCurrentPlayer() : Player {\n\n        return this.currentSingleGameSession.getCurrentPlayer();\n    }\n\n    getCurrentMoveDetails() : SingleGameMoveData{\n\n        return this.currentSingleGameSession.getCurrentMoveDetails();\n    }\n\n    getGameSessionHistory() : SingleGameMoveData[] {\n\n        return this.currentSingleGameSession.getGameSessionHistory();\n    }\n\n    // Generalize\n    getPlayerToPlayerScoreMap() : Map<Player, number> {\n\n        return new Map([\n            [\n                this.playerIDToPlayerMap.get(GameSessionPlayerID.PLAYER_1)!,\n                this.playerIDToPlayerScoreMap.get(GameSessionPlayerID.PLAYER_1)!\n            ],\n            [\n                this.playerIDToPlayerMap.get(GameSessionPlayerID.PLAYER_2)!,\n                this.playerIDToPlayerScoreMap.get(GameSessionPlayerID.PLAYER_2)!\n            ]\n        ]);\n    }\n\n    captureSquare(squareId : number) : void {\n\n        this.currentSingleGameSession.captureSquare(squareId);\n\n    }\n\n    timeTravelTo(moveNumber: number) : void {\n\n        this.currentSingleGameSession.timeTravelTo(moveNumber);\n    }\n\n    // Todo : Clean\n    initiateNextGameInSession() {\n\n        if (this.currentSingleGameSessionId == this.singleGameSessionList.length - 1) {\n            alert(\"Series Over. Start New Series\")\n            return\n        }\n        this.updateScore();\n        this.currentSingleGameSession = this.singleGameSessionList[++this.currentSingleGameSessionId];\n        this._isLastGameInSession = this.currentSingleGameSessionId == this.singleGameSessionList.length - 1;\n    }\n\n    finishGameSession() {\n        this.updateScore();\n        this._isGameSessionCompleted = true;\n    }\n\n    private updateScore() {\n        const winner = this.currentSingleGameSession.getCurrentMoveDetails().winner;\n        if (winner === this.playerIDToPlayerMap.get(GameSessionPlayerID.PLAYER_1)) {\n            this.playerIDToPlayerScoreMap.set(\n                GameSessionPlayerID.PLAYER_1,\n                this.playerIDToPlayerScoreMap.get(GameSessionPlayerID.PLAYER_1)! + 1\n            );\n        } else if (winner === this.playerIDToPlayerMap.get(GameSessionPlayerID.PLAYER_2)) {\n            this.playerIDToPlayerScoreMap.set(\n                GameSessionPlayerID.PLAYER_2,\n                this.playerIDToPlayerScoreMap.get(GameSessionPlayerID.PLAYER_2)! + 1\n            );\n        }\n    }\n}","export default class CssHelper {\n\n    // Todo : Find a more elegant implementation\n    static getCssClassName(...cssClasses: (string[] | string | undefined | (string | undefined)[])[]) : string {\n\n        let cssClassName = \"\";\n        for (let i = 0; i < cssClasses.length; i++) {\n\n            if (cssClasses[i] === undefined) {\n                continue;\n            } else if (typeof cssClasses[i] === \"string\") {\n                cssClassName += \" \" + cssClasses[i]\n            } else {\n                cssClassName += \" \" + (cssClasses[i] as Array<String>).join(\" \")\n            }\n\n        }\n\n        return cssClassName;\n    }\n}","import Player from \"./commons/Player\";\nimport {SingleGameSessionStatus} from \"./SingleGameSession\";\n\nexport class SingleGameMoveData {\n\n    private readonly _squares : (Player | undefined)[];\n    private readonly _movePlayer : Player;\n    private readonly _winner : Player | undefined;\n    private readonly _status : SingleGameSessionStatus;\n\n    constructor(squares : (Player | undefined)[],\n                movePlayer : Player,\n                winner : Player | undefined,\n                status : SingleGameSessionStatus) {\n\n        this._movePlayer = movePlayer;\n        this._squares = squares;\n        this._winner = winner;\n        this._status = status;\n    }\n\n    get squares(): (Player | undefined)[] {\n        return this._squares;\n    }\n\n    get winner(): Player | undefined {\n        return this._winner;\n    }\n\n    get status(): SingleGameSessionStatus {\n        return this._status;\n    }\n\n    get movePlayer(): Player {\n        return this._movePlayer;\n    }\n}","export default class Player {\n\n    private readonly _name: string\n    private readonly _side: string\n    private readonly _styleClass: string\n\n    constructor(name: string, side: string, styleClass: string) {\n        this._name = name;\n        this._side = side;\n        this._styleClass = styleClass;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get side(): string {\n        return this._side;\n    }\n\n    get styleClass(): string {\n        return this._styleClass;\n    }\n}","import Player from \"./commons/Player\";\nimport {SingleGameMoveData} from \"./SingleGameMoveData\";\nimport {GameSessionPlayerID} from \"./GameSession\";\n\nexport enum SingleGameSessionStatus {\n    IN_PROGRESS,\n    COMPLETED\n}\n\nexport default class SingleGameSession {\n\n    private playerIDToPlayerMap : Map<GameSessionPlayerID, Player>;\n    private history: SingleGameMoveData[]\n    private moveNumber: number;\n    private currentPlayer: Player\n\n    constructor(players: Map<GameSessionPlayerID, Player>,\n                startingPlayer?: Player) {\n\n        this.playerIDToPlayerMap = players;\n        this.moveNumber = 0;\n        this.currentPlayer = startingPlayer ?? this.getDefaultStartingPlayer()\n        this.history = [new SingleGameMoveData(\n            Array(9).fill(null),\n            this.currentPlayer,\n            undefined,\n            SingleGameSessionStatus.IN_PROGRESS\n        )];\n    }\n\n    getCurrentPlayer() : Player {\n\n        return this.currentPlayer;\n    }\n\n    getCurrentMoveDetails() : SingleGameMoveData{\n\n        return this.getGameSessionHistory()[this.moveNumber];\n    }\n\n    getGameSessionHistory() : SingleGameMoveData[] {\n\n        return this.history.slice();\n    }\n\n    captureSquare(squareId : number) {\n\n        const history = this.history.slice(0, this.moveNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        if (current.winner || SingleGameSession.isSquareAlreadyCaptured(squareId, squares)) {\n            return;\n        }\n\n        squares[squareId] = this.currentPlayer\n        const winner: Player | undefined = SingleGameSession.evaluateWinner(squares)\n        const status: SingleGameSessionStatus = (winner || SingleGameSession.areAllSquaresCaptured(squares))\n            ? SingleGameSessionStatus.COMPLETED\n            : SingleGameSessionStatus.IN_PROGRESS\n\n        // Update State\n        this.currentPlayer = this.getNextPlayer(this.currentPlayer);\n        this.history = history.concat([new SingleGameMoveData(\n            squares,\n            this.currentPlayer,\n            winner,\n            status\n        )]);\n        this.moveNumber = history.length;\n    }\n\n    timeTravelTo(moveNumber: number) {\n\n        // Update State\n        this.moveNumber = moveNumber;\n        this.currentPlayer = this.history[moveNumber].movePlayer\n    }\n\n    private getDefaultStartingPlayer() : Player {\n        return this.playerIDToPlayerMap.values().next().value;\n    }\n\n    private getNextPlayer(currentPlayer : Player) : Player {\n\n        if (currentPlayer === this.playerIDToPlayerMap.get(GameSessionPlayerID.PLAYER_1)) {\n            return this.playerIDToPlayerMap.get(GameSessionPlayerID.PLAYER_2)!;\n        } else if (currentPlayer === this.playerIDToPlayerMap.get(GameSessionPlayerID.PLAYER_2)) {\n            return this.playerIDToPlayerMap.get(GameSessionPlayerID.PLAYER_1)!;\n        }\n        throw \"Illegal Argument\";\n    }\n\n    private static isSquareAlreadyCaptured(squareId: number, squares: (Player | undefined)[]) : boolean {\n\n        return !!squares[squareId];\n    }\n\n    private static areAllSquaresCaptured(squares: (Player | undefined)[]) : boolean {\n\n        for (let i = 0; i < squares.length; i++) {\n            if (!squares[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static evaluateWinner(squares: (Player | undefined)[]) : Player | undefined {\n\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n        ];\n\n        for (let i = 0; i < lines.length; i++) {\n            const [a, b, c] = lines[i];\n            if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n                return squares[a];\n            }\n        }\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\nimport {SingleGameSessionStatus} from \"../SingleGameSession\";\nimport Player from \"../commons/Player\";\n\ninterface PlayGameStatusProps {\n    status: SingleGameSessionStatus;\n    currentPlayer: Player;\n    winner: Player | undefined;\n}\n\ninterface PlayGameStatusState {\n\n}\n\nexport default class PlayGameStatus extends React.Component<PlayGameStatusProps, PlayGameStatusState> {\n\n    private static defaultCssClasses : string[] = [\"game-status\"]\n\n    render() {\n\n        let statusDesc;\n        let statusClass;\n        if (this.props.winner) {\n            statusDesc = \"Winner: \" + this.props.winner.side;\n            statusClass = this.props.winner.styleClass\n        } else if(!this.props.winner && this.props.status == SingleGameSessionStatus.COMPLETED) {\n            statusDesc = \"Game is a Draw\";\n            statusClass = \"\"\n        } else {\n            statusDesc = \"Next player: \" + this.props.currentPlayer.side;\n            statusClass = this.props.currentPlayer.styleClass;\n        }\n\n        return (\n            <div className={CssHelper.getCssClassName(PlayGameStatus.defaultCssClasses, statusClass)}>\n                {statusDesc}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\n\ninterface SquareProps {\n    additionalCssClasses?: (string | undefined)[];\n    value?: string;\n    onClick() : void\n}\n\ninterface SquareState {\n\n}\n\nexport default class Square extends React.Component<SquareProps, SquareState> {\n\n    private static defaultCssClasses : string[] = [\"square\"]\n\n    render() {\n\n        return (\n            <button\n                className={CssHelper.getCssClassName(Square.defaultCssClasses, this.props.additionalCssClasses)}\n                onClick={this.props.onClick}>\n\n                {this.props.value}\n\n            </button>\n        )\n    }\n}","import React from \"react\";\nimport Square from \"./Square\";\nimport CssHelper from \"../../utils/CssHelper\";\nimport _ from 'underscore'\nimport Player from \"./Player\";\nconst HashSet = require('hashset');\n\ninterface BoardProps {\n    squares: (Player | undefined)[];\n    boardStyleList?: BoardStyle[];\n    onBoardSquareClick(squareId: number) : void;\n}\n\ninterface BoardState {\n\n}\n\nexport enum BoardStyle {\n    SMALL = \"small\",\n    NORMAL = \"\",\n    GAME_OVER = \"game-over\"\n}\n\nexport default class Board extends React.Component<BoardProps, BoardState> {\n\n    private static defaultBoardRowCssList : string[] = [\"board-row\"]\n\n    private static boardRowSupportedStyles = new HashSet(\n        BoardStyle.SMALL,\n        BoardStyle.NORMAL\n    )\n\n    private static boardSquareSupportedStyles = new HashSet(\n        BoardStyle.SMALL,\n        BoardStyle.NORMAL,\n        BoardStyle.GAME_OVER\n    )\n\n    render() {\n\n        const boardRowCssName: string = CssHelper.getCssClassName(\n            Board.defaultBoardRowCssList,\n            this.getBoardRowCssNameFromBoardStyle()\n        )\n        const boardSquareCssName: string = CssHelper.getCssClassName(\n            this.getBoardSquareCssNameFromBoardStyle()\n        )\n\n        return (\n            <div>{\n                _.range(0, 3)\n                    .map((value, index) => {\n                        return this.renderBoardRow(index, boardRowCssName, boardSquareCssName)\n                    })\n            }</div>\n        );\n    }\n\n    private renderBoardRow(rowId: number, boardRowCssName: string, boardSquareCssName: string) {\n\n        return (\n            <div className={boardRowCssName}>{\n                _.range(0, 3)\n                    .map((value, index) => {\n                        return this.renderSquare((3 * rowId) + index, boardSquareCssName)\n                    })\n            }</div>\n        )\n    }\n\n    private renderSquare(squareId: number, boardSquareCssName: string) {\n\n        const owningPlayer = this.props.squares[squareId];\n        return (\n            <Square\n                additionalCssClasses={[boardSquareCssName, owningPlayer?.styleClass]}\n                value={owningPlayer?.side}\n                onClick={() => this.props.onBoardSquareClick(squareId)}\n            />\n        );\n    }\n\n    private getBoardRowCssNameFromBoardStyle() : string {\n\n        return this.props.boardStyleList\n            ?.filter(value => Board.boardRowSupportedStyles.contains(value))\n            ?.join(\" \") ?? \"\"\n    }\n\n    private getBoardSquareCssNameFromBoardStyle() : string {\n\n        return this.props.boardStyleList\n            ?.filter(value => Board.boardSquareSupportedStyles.contains(value))\n            ?.join(\" \") ?? \"\"\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\n\ninterface PlayNextGameProps {\n    playNextGameStyleList?: PlayNextGameStyle[];\n    onNextGameClick() : void\n}\n\ninterface PlayNextGameState {\n\n}\n\nexport enum PlayNextGameStyle {\n    TTT_HIDDEN = \"ttt-hidden\",\n}\n\nexport default class PlayNextGame extends React.Component<PlayNextGameProps, PlayNextGameState> {\n\n    private static defaultCssClasses : string[] = [\"play-next-game-button\"]\n\n    render() {\n\n        return (\n            <button\n                className={\n                    CssHelper.getCssClassName(\n                        PlayNextGame.defaultCssClasses,\n                        this.getCssNameFromPlayNextGameStyleList()\n                    )\n                }\n                onClick={() => this.props.onNextGameClick()}>\n                Play Next\n            </button>\n        )\n    }\n\n    private getCssNameFromPlayNextGameStyleList() : string {\n\n        return this.props.playNextGameStyleList\n            ?.join(\" \") ?? \"\"\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\nimport Player from \"../commons/Player\";\n\ninterface PlayGameScoreProps {\n    playerToPlayerScoreMap: Map<Player, number>\n}\n\ninterface PlayGameScoreState {\n\n}\n\nexport default class PlayGameScore extends React.Component<PlayGameScoreProps, PlayGameScoreState> {\n\n    private static defaultCssClasses : string[] = [\"game-score\"]\n    private static defaultPlayerScoreCssClasses : string[] = [\"player-score\"]\n\n    render() {\n\n        const playerScores = Array\n            .from(this.props.playerToPlayerScoreMap)\n            .map(([player, score]) => {\n                return (\n                    <div\n                        className={\n                            CssHelper.getCssClassName(\n                                PlayGameScore.defaultPlayerScoreCssClasses,\n                                player.styleClass)\n                        }\n                    >\n                        {score}\n                    </div>\n                )\n            })\n\n        return (\n            <div className={CssHelper.getCssClassName(PlayGameScore.defaultCssClasses)}>\n                {playerScores}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\n\ninterface FinishGameSeriesProps {\n    finishGameSeriesStyleList?: FinishGameSeriesStyle[];\n    onFinishGameSeriesClick() : void\n}\n\ninterface FinishGameSeriesState {\n\n}\n\nexport enum FinishGameSeriesStyle {\n    TTT_HIDDEN = \"ttt-hidden\",\n}\n\nexport default class FinishGameSeries extends React.Component<FinishGameSeriesProps, FinishGameSeriesState> {\n\n    private static defaultCssClasses : string[] = [\"finish-game-series-button\"]\n\n    render() {\n\n        return (\n            <button\n                className={\n                    CssHelper.getCssClassName(\n                        FinishGameSeries.defaultCssClasses,\n                        this.getCssNameFromFinishGameSeriesStyleList()\n                    )\n                }\n                onClick={() => this.props.onFinishGameSeriesClick()}>\n                Finish Game Series\n            </button>\n        )\n    }\n\n    private getCssNameFromFinishGameSeriesStyleList() : string {\n\n        return this.props.finishGameSeriesStyleList\n            ?.join(\" \") ?? \"\"\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\nimport PlayGameStatus from \"./PlayGameStatus\";\nimport Board, {BoardStyle} from \"../commons/Board\";\nimport {SingleGameMoveData} from \"../SingleGameMoveData\";\nimport {SingleGameSessionStatus} from \"../SingleGameSession\";\nimport Player from \"../commons/Player\";\nimport PlayGameScore from \"./PlayGameScore\";\nimport PlayNextGame, {PlayNextGameStyle} from \"./PlayNextGame\";\nimport FinishGameSeries, {FinishGameSeriesStyle} from \"./FinishGameSeries\";\n\ninterface PlayGameTabProps {\n    singleGameMoveData: SingleGameMoveData;\n    currentPlayer: Player;\n    playerToPlayerScoreMap: Map<Player, number>;\n    isLastGameInSeries: boolean;\n    onGameBoardSquareClick(squareId: number) : void\n    onNextGameClick() : void\n    onFinishGameSeriesClick() : void\n}\n\ninterface PlayGameTabState {\n\n}\n\nexport default class PlayGameTab extends React.Component<PlayGameTabProps, PlayGameTabState> {\n\n    // Game Board\n    private static defaultGameBoardCssClasses: string[] = [\"game-board\", \"large\"]\n\n    render() {\n\n        const boardStyleList = (this.props.singleGameMoveData.status == SingleGameSessionStatus.COMPLETED)\n            ? [BoardStyle.GAME_OVER]\n            : [];\n\n        return (\n            <div>\n                <div className={CssHelper.getCssClassName(PlayGameTab.defaultGameBoardCssClasses)}>\n                    <PlayGameStatus\n                        status={this.props.singleGameMoveData.status}\n                        currentPlayer={this.props.currentPlayer}\n                        winner={this.props.singleGameMoveData.winner}\n                    />\n                    <Board\n                        boardStyleList={boardStyleList}\n                        squares={this.props.singleGameMoveData.squares}\n                        onBoardSquareClick={(squareId) => this.props.onGameBoardSquareClick(squareId)}\n                    />\n                    <PlayGameScore\n                        playerToPlayerScoreMap={this.props.playerToPlayerScoreMap}\n                    />\n                    <PlayNextGame\n                        playNextGameStyleList={\n                            !this.props.isLastGameInSeries &&\n                                this.props.singleGameMoveData.status === SingleGameSessionStatus.COMPLETED\n                                    ? []\n                                    : [PlayNextGameStyle.TTT_HIDDEN]\n                        }\n                        onNextGameClick={() => this.props.onNextGameClick()}>\n                    </PlayNextGame>\n                    <FinishGameSeries\n                        finishGameSeriesStyleList={\n                            this.props.isLastGameInSeries &&\n                                this.props.singleGameMoveData.status === SingleGameSessionStatus.COMPLETED\n                                    ? []\n                                    : [FinishGameSeriesStyle.TTT_HIDDEN]\n                        }\n                        onFinishGameSeriesClick={() => this.props.onFinishGameSeriesClick()}>\n                    </FinishGameSeries>\n                </div>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\nimport Board, {BoardStyle} from \"../commons/Board\";\nimport Player from \"../commons/Player\";\nimport PredicateUtils from \"../../utils/PredicateUtils\";\n\nconst HashSet = require('hashset');\n\ninterface TimeTravelStepProps {\n    timeTravelStepStyleList?: TimeTravelStepStyle[];\n    squares: (Player | undefined)[];\n    timeTravelStepNumber: number;\n    onTimeTravelStepButtonClick(): void\n}\n\ninterface TimeTravelStepState {\n\n}\n\nexport enum TimeTravelStepStyle {\n    GAME_OVER = \"game-over\"\n}\n\nexport default class TimeTravelStep extends React.Component<TimeTravelStepProps, TimeTravelStepState> {\n\n    private static defaultCssClasses: string[] = [\"game-board small\"]\n\n    // Time Travel Step Board\n    private static defaultTimeTravelStepBoardStyleList: BoardStyle[] = [BoardStyle.SMALL]\n    private static timeTravelStepBoardSupportedStyles = new HashSet(\n        BoardStyle.GAME_OVER\n    )\n    private static timeTravelStepStyleToBoardStyleMap = new Map<TimeTravelStepStyle, BoardStyle>([\n        [TimeTravelStepStyle.GAME_OVER, BoardStyle.GAME_OVER]\n    ]);\n\n    // Time Travel Step Button\n    private static defaultTimeTravelStepButtonCssClasses: string[] = [\"time-travel-step-button\"]\n\n    render() {\n\n        const timeTravelStepButtonDesc = this.props.timeTravelStepNumber\n            ? \"Go to Game move #\" + (this.props.timeTravelStepNumber)\n            : \"Go to Game Start\"\n\n        return (\n            <div className={CssHelper.getCssClassName(TimeTravelStep.defaultCssClasses)}>\n                <Board\n                    boardStyleList={this.getBoardStyleList()}\n                    squares={this.props.squares}\n                    onBoardSquareClick={() => {}}\n                />\n                <button\n                    className={CssHelper.getCssClassName(TimeTravelStep.defaultTimeTravelStepButtonCssClasses)}\n                    onClick={this.props.onTimeTravelStepButtonClick}>\n                        {timeTravelStepButtonDesc}\n                </button>\n            </div>\n        );\n    }\n\n    private getBoardStyleList() : BoardStyle[] {\n\n        return TimeTravelStep.defaultTimeTravelStepBoardStyleList.concat(\n            this.props.timeTravelStepStyleList\n                ?.filter(value => TimeTravelStep.timeTravelStepBoardSupportedStyles.contains(value))\n                ?.map(value => TimeTravelStep.timeTravelStepStyleToBoardStyleMap.get(value))\n                ?.filter(PredicateUtils.notEmpty) ?? []\n        );\n    }\n}","export default class PredicateUtils {\n\n    static notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n        return value !== null && value !== undefined;\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\nimport TimeTravelStep, {TimeTravelStepStyle} from \"./TimeTravelStep\";\nimport {SingleGameMoveData} from \"../SingleGameMoveData\";\n\ninterface TimeTravelTabProps {\n    history: SingleGameMoveData[];\n    onTimeTravelStepButtonClick(gameMoveNumber : number): void;\n}\n\ninterface TimeTravelTabState {\n\n}\n\nexport default class TimeTravelTab extends React.Component<TimeTravelTabProps, TimeTravelTabState> {\n\n    private static defaultCssClasses : string[] = [\"time-travel-tab\"]\n    private static defaultTimeTravelStepsCssClasses : string[] = [\"time-travel-steps\"]\n\n    render() {\n\n        const steps = this.props.history.map((move, moveNumber) => {\n\n            const gameMoveNumber = moveNumber;\n            const timeTravelStepStyleList = this.props.history[gameMoveNumber].status\n                ? [TimeTravelStepStyle.GAME_OVER]\n                : [];\n\n            return (\n                <TimeTravelStep\n                    timeTravelStepStyleList={timeTravelStepStyleList}\n                    squares={this.props.history[gameMoveNumber].squares}\n                    timeTravelStepNumber={gameMoveNumber}\n                    onTimeTravelStepButtonClick={() => this.props.onTimeTravelStepButtonClick(gameMoveNumber)}\n                />\n            )\n\n        });\n\n        return (\n            <div className={CssHelper.getCssClassName(TimeTravelTab.defaultCssClasses)}>\n                <div id=\"time-travel-label\">{\"Time travel\"}</div>\n                <div className={CssHelper.getCssClassName(TimeTravelTab.defaultTimeTravelStepsCssClasses)}>\n                    {steps}\n                </div>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\n\ninterface PlayNextGameSeriesProps {\n    playNextGameSeriesStyleList?: PlayNextGameSeriesStyle[];\n    onNextGameSeriesClick() : void\n}\n\ninterface PlayNextGameSeriesState {\n\n}\n\nexport enum PlayNextGameSeriesStyle {\n    TTT_HIDDEN = \"ttt-hidden\",\n}\n\nexport default class PlayNextGameSeries extends React.Component<PlayNextGameSeriesProps, PlayNextGameSeriesState> {\n\n    private static defaultCssClasses : string[] = [\"play-next-game-series-button\"]\n\n    render() {\n\n        return (\n            <button\n                className={\n                    CssHelper.getCssClassName(\n                        PlayNextGameSeries.defaultCssClasses,\n                        this.getCssNameFromPlayNextGameSeriesStyleList()\n                    )\n                }\n                onClick={() => this.props.onNextGameSeriesClick()}>\n                Play Next Series\n            </button>\n        )\n    }\n\n    private getCssNameFromPlayNextGameSeriesStyleList() : string {\n\n        return this.props.playNextGameSeriesStyleList\n            ?.join(\" \") ?? \"\"\n    }\n}","import React from \"react\";\nimport CssHelper from \"../../utils/CssHelper\";\nimport {createPortal} from \"react-dom\";\n\ninterface ModalProps {\n    modalRootId? : string\n    modalStyleClasses? : string[]\n}\n\ninterface ModalState {\n}\n\nexport default class Modal extends React.Component<ModalProps, ModalState> {\n\n    private readonly modalRoot: HTMLElement;\n    private readonly modalElement: HTMLElement;\n\n    constructor(props : ModalProps) {\n        super(props);\n        this.modalRoot = document.getElementById( this.props.modalRootId ?? 'root' )!;\n        this.modalElement = document.createElement( 'div' );\n        this.modalElement.className = CssHelper.getCssClassName(this.props.modalStyleClasses)\n    }\n\n    componentDidMount() {\n        this.modalRoot.appendChild( this.modalElement );\n    }\n\n    componentWillUnmount() {\n        this.modalRoot.removeChild( this.modalElement );\n    }\n\n    render() {\n\n        return createPortal( this.props.children, this.modalElement );\n    }\n}","import React from \"react\";\nimport Modal from \"./commons/Modal\";\nimport Player from \"./commons/Player\";\nimport CssHelper from \"../utils/CssHelper\";\nimport PlayNextGameSeries from \"./playgame/PlayNextGameSeries\";\n\ninterface GameSeriesSummaryModalProps {\n    playerToPlayerScoreMap: Map<Player, number>;\n    showModal: boolean;\n    onNextGameSeriesClick() : void\n}\n\ninterface GameSeriesSummaryModalState {\n\n}\n\nexport default class GameSeriesSummaryModal extends React.Component<GameSeriesSummaryModalProps, GameSeriesSummaryModalState> {\n\n    private static defaultHeaderCssClasses : string[] = [\"ttt-modal-header\"]\n\n    render() {\n\n        if (!this.props.showModal) {\n            return null;\n        }\n\n        const winner : Player | undefined = this.getWinner();\n        const headerText = winner != undefined ? \"Winner : \" + winner.name : \"It's a Draw\"\n\n        return (\n\n            <Modal modalStyleClasses={[\"ttt-modal\"]}>\n                <div className={\"ttt-modal-content\"}>\n                    <div\n                        className={\n                            CssHelper.getCssClassName(\n                                GameSeriesSummaryModal.defaultHeaderCssClasses,\n                                winner?.styleClass\n                            )\n                        }\n                    >\n                        {headerText}\n                    </div>\n                    <PlayNextGameSeries\n                        onNextGameSeriesClick={() => this.props.onNextGameSeriesClick()}>\n                    </PlayNextGameSeries>\n                </div>\n            </Modal>\n        )\n    }\n\n    getWinner() : Player | undefined {\n\n        let winner : Player | undefined;\n        let winnerScore = 0;\n        this.props.playerToPlayerScoreMap.forEach(\n            (score, player) => {\n\n                if (score > winnerScore) {\n                    winner = player\n                    winnerScore = score\n                } else if (score == winnerScore) {\n                    winner = undefined;\n                }\n            }\n        )\n\n        return winner;\n    }\n}","import React from \"react\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport enum ToastType {\n    ERROR\n}\n\ninterface ToastProps {\n    toastType : ToastType\n    toastText? : string\n    showToast : boolean;\n    notifyToastShown() : void\n}\n\ninterface ToastState {\n}\n\nexport default class TicTacToeToast extends React.Component<ToastProps, ToastState> {\n\n    constructor(props : ToastProps) {\n        super(props);\n    }\n\n    render() {\n\n        if (this.props.showToast) {\n            this.notify();\n        }\n\n        return (\n            <ToastContainer\n                position=\"top-center\"\n                toastClassName={\"ttt-toast\"}\n                autoClose={2000}\n                hideProgressBar={false}\n                newestOnTop\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n        );\n    }\n\n    notify() {\n\n        if (this.props.toastType === ToastType.ERROR) {\n            toast.error(this.props.toastText, {\n                onClose : () => {this.props.notifyToastShown()}\n            });\n        }\n    }\n}","import React from \"react\";\nimport Modal from \"./commons/Modal\";\nimport CssHelper from \"../utils/CssHelper\";\nimport {ToastType} from \"./commons/TicTacToeToast\";\n\ninterface GameSetupModalProps {\n    showModal: boolean;\n    onGameSetupConfigurationsSubmit(numberOfGames : number) : void;\n    showToast(toastType : ToastType, toastText : string) : void;\n}\n\ninterface GameSetupModalState {\n    numberOfGames : number\n}\n\nexport default class GameSetupModal extends React.Component<GameSetupModalProps, GameSetupModalState> {\n\n    private static defaultHeaderCssClasses : string[] = [\"ttt-game-setup-modal-header\"]\n\n    constructor(props: GameSetupModalProps) {\n        super(props);\n        this.state = {\n            numberOfGames: 4\n        };\n    }\n\n    render() {\n\n        if (!this.props.showModal) {\n            return null;\n        }\n\n        return (\n\n            <Modal modalStyleClasses={[\"ttt-modal\"]}>\n                <div className={\"ttt-modal-content\"}>\n                    <div\n                        className={\n                            CssHelper.getCssClassName(\n                                GameSetupModal.defaultHeaderCssClasses\n                            )\n                        }\n                    >\n                        {\"Game Setup\"}\n                    </div>\n                    <div className={\"ttt-form\"}>\n                        <div className={\"form-box\"}>\n                            <label>No. of Games:</label>\n                            <input type=\"number\" value={this.state.numberOfGames} onChange={this.updateNumberOfGames.bind(this)} />\n                        </div>\n                        <div className={\"form-box\"}>\n                            <label>Game Type:</label>\n                            <input type=\"readonly\" value=\"Single-Player\" onClick={this.updateGameType.bind(this)}/>\n                        </div>\n                        <div className={\"form-box\"}>\n                            <label>Opponent Type:</label>\n                            <input type=\"readonly\" value=\"Human\" onClick={this.updateOpponentType.bind(this)} />\n                        </div>\n                        <button\n                            className={\"submit-button\"}\n                            onClick={() => this.props.onGameSetupConfigurationsSubmit(this.state.numberOfGames)}>\n                            Let's Play!\n                        </button>\n                    </div>\n                </div>\n            </Modal>\n        )\n    }\n\n    private updateNumberOfGames(event : React.FormEvent<HTMLInputElement>) {\n\n        const numberOfGames = parseInt(event.currentTarget.value);\n        if (numberOfGames < 1) {\n            this.props.showToast(ToastType.ERROR,\"At least One Game must be played!\");\n            return;\n        }\n        this.setState({numberOfGames: numberOfGames});\n    }\n\n    private updateGameType() {\n        this.updateDisabledInputTypes();\n    }\n\n    private updateOpponentType() {\n        this.updateDisabledInputTypes();\n    }\n\n    private updateDisabledInputTypes() {\n        this.props.showToast(ToastType.ERROR,\"Sorry! This feature is still under construction.\");\n    }\n}","import './tictactoe.scss';\nimport React from \"react\";\nimport PlayGameTab from \"./playgame/PlayGameTab\";\nimport TimeTravelTab from \"./timetravel/TimeTravelTab\";\nimport GameSession from \"./GameSession\";\nimport GameSeriesSummaryModal from \"./GameSeriesSummaryModal\";\nimport GameSetupModal from \"./GameSetupModal\";\nimport TicTacToeToast, {ToastType} from \"./commons/TicTacToeToast\";\nimport NavBar from \"../NavBar\";\n\ninterface GameProps {\n    startGame: boolean\n}\n\ninterface GameState {\n    gameSession: GameSession\n    toastType: ToastType\n    showToast: boolean\n    toastText: string\n}\n\nexport default class Game extends React.Component<GameProps, GameState> {\n\n    constructor(props : GameProps) {\n        super(props);\n        this.state = {\n            gameSession: new GameSession(),\n            toastType: ToastType.ERROR,\n            showToast: false,\n            toastText: \"\"\n        };\n    }\n\n    render() {\n\n        if (!this.props.startGame) {\n            return null;\n        }\n\n        return (\n            <div id=\"ttt-game\" className=\"game\">\n                <GameSetupModal\n                    showModal={!this.state.gameSession.isGameSessionSetup}\n                    onGameSetupConfigurationsSubmit={(numberOfGames) => {this.setupGameConfigurations(numberOfGames)}}\n                    showToast={((toastType, toastText) => this.showToast(toastType, toastText))}\n                />\n                <PlayGameTab\n                    singleGameMoveData={this.state.gameSession.getCurrentMoveDetails()}\n                    currentPlayer={this.state.gameSession.getCurrentPlayer()}\n                    playerToPlayerScoreMap={this.state.gameSession.getPlayerToPlayerScoreMap()}\n                    isLastGameInSeries={this.state.gameSession.isLastGameInSession}\n                    onGameBoardSquareClick={(i) => this.captureSquare(i)}\n                    onNextGameClick={() => this.playNextGame()}\n                    onFinishGameSeriesClick={() => this.finishGameSeries()}\n                />\n                <TimeTravelTab\n                    history={this.state.gameSession.getGameSessionHistory()}\n                    onTimeTravelStepButtonClick={(gameMoveNumber) => this.timeTravelTo(gameMoveNumber)}\n                />\n                <GameSeriesSummaryModal\n                    playerToPlayerScoreMap={this.state.gameSession.getPlayerToPlayerScoreMap()}\n                    showModal={this.state.gameSession.isGameSessionCompleted}\n                    onNextGameSeriesClick={() => this.playNextGameSeries()}\n                />\n                <TicTacToeToast\n                    toastType={this.state.toastType}\n                    showToast={this.state.showToast}\n                    toastText={this.state.toastText}\n                    notifyToastShown={() => this.hideToast()}>\n                </TicTacToeToast>\n            </div>\n        );\n    }\n\n    private setupGameConfigurations(numberOfGames : number) {\n        this.state.gameSession.setupGameSession(numberOfGames);\n        this.refreshState();\n    }\n\n    private captureSquare(squareId: number) {\n\n        this.state.gameSession.captureSquare(squareId);\n        this.refreshState();\n    }\n\n    private timeTravelTo(moveNumber: number) {\n\n        this.state.gameSession.timeTravelTo(moveNumber);\n        this.refreshState();\n    }\n\n    private playNextGame() {\n        this.state.gameSession.initiateNextGameInSession();\n        this.refreshState();\n    }\n\n    private finishGameSeries() {\n        this.state.gameSession.finishGameSession();\n        this.refreshState();\n    }\n\n    private playNextGameSeries() {\n        this.setState({ gameSession: new GameSession() })\n    }\n\n    private showToast(toastType : ToastType, toastText : string) {\n        this.setState({\n            toastType: toastType,\n            showToast: true,\n            toastText: toastText\n        })\n    }\n\n    private hideToast() {\n        this.setState({\n            showToast: false,\n        })\n    }\n\n    refreshState() {\n        this.setState({ gameSession: this.state.gameSession })\n    }\n}","import React from \"react\";\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { faGoogleDrive, faGithub, faMedium, faLinkedin } from \"@fortawesome/free-brands-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ninterface NavBarProps {\n}\n\ninterface NavBarState {\n\n}\n\nexport default class NavBar extends React.Component<NavBarProps, NavBarState> {\n\n    render() {\n\n        return (\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" className={\"prw-navbar\"} sticky={\"top\"}>\n                <Navbar.Brand href=\"#home\">Pratick Roy</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav \">\n                    <Nav className=\"justify-content-end\" style={{ width: \"100%\" }}>\n                        <Nav.Link href=\"https://drive.google.com/file/d/11mQdCVA1H39n5su4rjRmBcrF9DnOOAzy/view?usp=sharing\" target=\"_blank\">\n                            <FontAwesomeIcon icon={faGoogleDrive} /> Resume\n                        </Nav.Link>\n                        <Nav.Link href=\"https://github.com/pratickRoy\" target=\"_blank\">\n                            <FontAwesomeIcon icon={faGithub} /> Projects\n                        </Nav.Link>\n                        <Nav.Link href=\"https://medium.com/@pratickRoy\" target=\"_blank\">\n                            <FontAwesomeIcon icon={faMedium} /> Posts\n                        </Nav.Link>\n                        <Nav.Link href=\"https://www.linkedin.com/in/pratickroy/\" target=\"_blank\">\n                            <FontAwesomeIcon icon={faLinkedin} /> Connect\n                        </Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        )\n    }\n}","import React from \"react\";\nimport Player from \"./tictactoe/commons/Player\";\nimport Modal from \"./tictactoe/commons/Modal\";\nimport CssHelper from \"./utils/CssHelper\";\nimport ReactPlayer from \"react-player\";\nimport './index.scss'\nimport GameSession from \"./tictactoe/GameSession\";\nimport {ToastType} from \"./tictactoe/commons/TicTacToeToast\";\n\ninterface MVPIntroModalProps {\n    showModal: boolean;\n    notifyIntroCompleted(): void;\n}\n\ninterface MVPIntroModalState {\n    playerWidth: number\n    playerHeight: number\n}\n\n\nexport default class MVPIntroModal extends React.Component<MVPIntroModalProps, MVPIntroModalState> {\n\n    private static defaultHeaderCssClasses : string[] = [\"mvp-intro-header\"]\n\n    constructor(props: MVPIntroModalProps) {\n        super(props);\n        this.state = this.getIdealScreenDimensions();\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.updateIdealScreenDimensions.bind(this));\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateIdealScreenDimensions.bind(this));\n    }\n\n    render() {\n\n        if (!this.props.showModal) {\n            return null;\n        }\n\n        return (\n\n            <Modal modalStyleClasses={[\"ttt-modal\"]}>\n                <div className={\"mvp-intro-content\"}>\n                    <div className={CssHelper.getCssClassName(MVPIntroModal.defaultHeaderCssClasses)}>\n                        Hello World!\n                    </div>\n                    <div className={\"mvp-intro-desc\"} style={{width : this.state.playerWidth}}>\n                        First of all thank you so much for visiting my website.\n                        The website is still under heavy construction, and almost nothing is ready except\n                        for a tic tac toe game (long story!). So while construction finishes, play a round!\n                        If you want to know the long story, play the video. (Fair Warning - It could be boring.)\n                        If it's boring, skip over to the game!\n                    </div>\n                    <ReactPlayer\n                        url='https://youtu.be/T44vtrva414'\n                        controls={true}\n                        width={this.state.playerWidth}\n                        height={this.state.playerHeight}\n                    />\n                    <button\n                        className={\"complete-mvp-intro-button\"}\n                        onClick={() => {this.props.notifyIntroCompleted()}}>\n                        Lets Play Some Tic Tac Toe!\n                    </button>\n                </div>\n            </Modal>\n        )\n    }\n\n    updateIdealScreenDimensions() {\n        this.setState(this.getIdealScreenDimensions());\n    }\n\n    // ToDo : clean\n    getIdealScreenDimensions() : {playerWidth : number, playerHeight : number} {\n\n        const maxWidth = window.innerWidth;\n        const maxHeight = window.innerHeight;\n\n        const widthPadding = maxWidth * (20/100);\n        const heightPadding = maxHeight * (40/100);\n\n        let screenWidth = maxWidth - widthPadding < 224 ? 224 : maxWidth - widthPadding;\n        let screenHeight = maxHeight - heightPadding  < 224 ? 224 : maxHeight - heightPadding;\n\n        return {\n            playerWidth : screenWidth,\n            playerHeight : screenWidth * (9/16) >= screenHeight\n                ? screenHeight\n                : screenWidth * (9/16)\n        }\n    }\n}","import React from \"react\";\nimport NavBar from \"../NavBar\";\nimport Game from \"./Game\";\nimport MVPIntroModal from \"../MVPIntroModal\";\n\ninterface TicTacToePageProps {\n}\n\ninterface TicTacToePageState {\n    introCompleted: boolean\n}\n\nexport default class TicTacToePage extends React.Component<TicTacToePageProps, TicTacToePageState> {\n\n    constructor(props: TicTacToePageProps) {\n        super(props);\n        this.state = {\n            introCompleted : false\n        }\n    }\n\n    render() {\n\n        return (\n            <React.Fragment>\n                <NavBar/>\n                <Game startGame={this.state.introCompleted}/>\n                <MVPIntroModal\n                    showModal={!this.state.introCompleted}\n                    notifyIntroCompleted={() => { this.setState({introCompleted : true})}}\n                />\n            </React.Fragment>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Game from \"./tictactoe/Game\";\nimport TicTacToePage from \"./tictactoe/TicTacToePage\";\n\n// ========================================\n\nReactDOM.render(\n    <TicTacToePage/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}